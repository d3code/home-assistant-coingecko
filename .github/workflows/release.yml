name: Auto Release

on:
  push:
    branches:
      - master
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
      
      - name: Calculate next version
        id: next_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Remove 'v' prefix and split version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
      
      - name: Update manifest version
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          # Remove 'v' prefix for manifest
          VERSION_NUMBER=${NEW_VERSION#v}
          
          # Update manifest.json
          jq --arg version "$VERSION_NUMBER" '.version = $version' custom_components/coingecko/manifest.json > temp.json
          mv temp.json custom_components/coingecko/manifest.json
          
          echo "Updated manifest.json to version $VERSION_NUMBER"
      
      - name: Create tag
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add custom_components/coingecko/manifest.json
          git commit -m "chore: bump version to $NEW_VERSION" || exit 0
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"
          git push origin master
      
      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          PREVIOUS_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Get commits since last tag
          COMMITS=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD 2>/dev/null || git log --pretty=format:"- %s" HEAD)
          
          # Create changelog
          CHANGELOG="## Changes in $NEW_VERSION

          $COMMITS

          ---
          *This release was automatically generated by GitHub Actions*"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.new_version }}
          release_name: ${{ steps.next_version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
